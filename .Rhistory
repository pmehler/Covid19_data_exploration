confirmed_cases <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv") #,check.names = FALSE to get rid of X prefix
deaths <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv") #,check.names = FALSE to get rid of X prefix
states_data <- read.csv("https://covidtracking.com/api/v1/states/current.csv")
#TO DO:
# 1. Animate?
# 1.5 World Map?
# 2. Clean up to make it more report oriented
# 3. Make multiple province countries functional with clean_data()
library(dplyr)
library(tidyverse)
library(ggplot2)
#state_group <- c("New York", "Washington", "California", "New Jersey", "Massachusetts", "Florida")
# us <- confirmed_cases %>%
#   #filter(Province.State=="New York" | Province.State=="Washington" |Province.State=="California" | #Province.State=="New Jersey" | Province.State=="Massachusetts" | Province.State=="Florida") %>%
#   filter(Country.Region=="US") %>%
#   gather(key = X1.22.20, value = cases, 5:names(confirmed_cases)[length(names(confirmed_cases))]) %>%
#   mutate(date = sub("X", "", X1.22.20)) %>%
#   select(-X1.22.20) %>%
#   mutate(date = as.Date(date,format="%m.%d.%y")) %>%
#   arrange(-cases)
#
# # Find locations with top number cases
# temp <- head(subset(us, date==us[["date"]][1]), 10)
# states <- temp$Province.State
#
# us <- filter(us, Province.State %in% states)
# ggplot(data = us, aes(x=date, y=cases, group = Province.State, color = Province.State, label = Province.State)) +
#   labs(title = "Number of Cases in Top 6 Most Infected US States") +
#   geom_line() +
#   xlim(as.Date("3.8.20",format="%m.%d.%y"),NA) +
#   theme(legend.title = element_blank())
# # Plot without New York
# ggplot(data = subset(us, Province.State!="New York"),
#        aes(x=date, y=cases, group = Province.State, color = Province.State, label = Province.State)) +
#   labs(title = "Number of Cases in Top 6 Most Infected US States") +
#   geom_line() +
#   xlim(as.Date("3.8.20",format="%m.%d.%y"),NA) +
#   theme(legend.title = element_blank())
# Compute power too low to handle master dataset, so individual countries were chosen
# region == 1 means country, region == 2 means province
clean_data <- function(name, region){
if (region==1){
temp_deaths <- deaths %>%
filter(Country.Region==name) %>%
#Convert to long format
gather(key = X1.22.20, value = deaths, 5:names(confirmed_cases)[length(names(confirmed_cases))]) %>%
mutate(date = sub("X", "", X1.22.20)) %>%  #get rid of the X prefix
select(-X1.22.20) %>% #delete old column
mutate(date = as.Date(date,format="%m.%d.%y")) %>%  #turn it into a date object
select(deaths, date)
# temp_recovered <- recovered %>%
#   filter(Country.Region==name) %>%
#   gather(key = X1.22.20, value = recovered, 5:names(confirmed_cases)[length(names(confirmed_cases))]) %>%
#   mutate(date = sub("X", "", X1.22.20)) %>%
#   select(-X1.22.20) %>%
#   mutate(date = as.Date(date,format="%m.%d.%y")) %>%
#   select(recovered, date)
temp_cases <- confirmed_cases %>%
filter(Country.Region==name) %>%
gather(key = X1.22.20, value = cases, 5:names(confirmed_cases)[length(names(confirmed_cases))]) %>%
mutate(date = sub("X", "", X1.22.20)) %>%
select(-X1.22.20) %>%
mutate(date = as.Date(date,format="%m.%d.%y"))
temp_cases <- left_join(temp_cases, temp_deaths, "date")
#  temp_cases <- left_join(temp_cases, temp_recovered, "date")
temp_cases <- temp_cases %>%
gather(key = type, value = amount, cases, deaths) # recovered removed
df <- temp_cases %>%
arrange(-as.integer(date)) %>%
arrange(type)
### calculate slope ###
for(i in 1:(length(df$amount)-1)){
if(i!=length(df$amount)/2){ # avoid calculating for change in type from cases to deaths
df$slope[i] <- df$amount[i]-df$amount[i+1] # might need to mutate slope column
}
else{df$slope[i] <- 0}
}
df$slope[length(df$amount)] <- 0
# Double derivative
for(i in 1:(length(df$amount)-1)){
if(i!=length(df$amount)/2){ # avoid calculating for change in type from cases to deaths
df$double_derivative[i] <- df$slope[i]-df$slope[i+1] # might need to mutate slope column
}
else{df$double_derivative[i] <- 0}
}
df$double_derivative[length(df$amount)] <- 0
return(df)
}
else{
temp_deaths <- deaths %>%
filter(Province.State==name) %>%
gather(key = X1.22.20, value = deaths, 5:names(confirmed_cases)[length(names(confirmed_cases))]) %>%
mutate(date = sub("X", "", X1.22.20)) %>%
select(-X1.22.20) %>%
mutate(date = as.Date(date,format="%m.%d.%y")) %>%
select(deaths, date)
# temp_recovered <- recovered %>%
#   filter(Province.State==name) %>%
#   gather(key = X1.22.20, value = recovered, 5:names(confirmed_cases)[length(names(confirmed_cases))]) %>%
#   mutate(date = sub("X", "", X1.22.20)) %>%
#   select(-X1.22.20) %>%
#   mutate(date = as.Date(date,format="%m.%d.%y")) %>%
#   select(recovered, date)
temp_cases <- confirmed_cases %>%
filter(Province.State==name) %>%
gather(key = X1.22.20, value = cases, 5:names(confirmed_cases)[length(names(confirmed_cases))]) %>%
mutate(date = sub("X", "", X1.22.20)) %>%
select(-X1.22.20) %>%
mutate(date = as.Date(date,format="%m.%d.%y"))
temp_cases <- left_join(temp_cases, temp_deaths, "date")
#   temp_cases <- left_join(temp_cases, temp_recovered, "date")
temp_cases <- temp_cases %>%
gather(key = type, value = amount, cases, deaths) # removed recovered
df <- temp_cases %>%
arrange(-as.integer(date)) %>%
arrange(type)
### calculate slope ###
for(i in 1:(length(df$amount)-1)){
if(i!=length(df$amount)/2){ # avoid calculating for change in type from cases to deaths
df$slope[i] <- df$amount[i]-df$amount[i+1] # might need to mutate slope column
}
else{df$slope[i] <- 0}
}
df$slope[length(df$amount)] <- 0
# Double Derivative
for(i in 1:(length(df$amount)-1)){
if(i!=length(df$amount)/2){ # avoid calculating for change in type from cases to deaths
df$double_derivative[i] <- df$slope[i]-df$slope[i+1] # might need to mutate slope column
}
else{df$double_derivative[i] <- 0}
}
df$double_derivative[length(df$amount)] <- 0
return(df)
}
}
# # CHOOSE YOUR COUNTRY OR PROVINCE
# 1. Only works for Provinces and Countries without several provinces
# 2. region == 1 means country, region == 2 means province
# data sets
hubei <- clean_data("Hubei", 2)
italy <- clean_data("Italy", 1)
s.korea <- clean_data("Korea, South", 1)
#ny <- clean_data("New York", 2)
iran <- clean_data("Iran", 1)
spain <- clean_data("Spain",1)
us <- clean_data("US",1)
germany <- clean_data("Germany",1)
# Row combine all datasets
combined.countries <- rbind(hubei, italy, s.korea, iran, spain, us)
# Works for countries with several provinces
# us_total <- confirmed_cases %>%
#   filter(Country.Region=="US") %>%
#   gather(key = X1.22.20, value = cases, 5:names(confirmed_cases)[length(names(confirmed_cases))]) %>%
#   mutate(date = sub("X", "", X1.22.20)) %>%
#   select(-X1.22.20) %>%
#   mutate(date = as.Date(date,format="%m.%d.%y")) %>%
#   gather(key = type, value = amount, cases) %>%
#   group_by(date) %>%
#   summarize(amount = sum(amount),
#             Country.Region = "US")
hubei %>%
filter(type=="cases") %>%
ggplot(aes(x=date, y=amount, group = 1)) +
labs(title = "hubei province, red line indicates Wuhan shutdown") +
geom_line() +
geom_vline(xintercept = as.Date("1.23.20",format="%m.%d.%y"),
color = "red", size=1) +
xlim(as.Date("1.22.20",format="%m.%d.%y"),NA)
#Wuhan Lockdown January 23rd
ggplot(data = hubei, aes(date, amount, fill = type)) +
geom_bar(position="stack", stat = "identity") +
labs(title = "Cases, Deaths in Hubei Province Through Time",
x = "Date",
y = "Amount") +
theme(legend.title=element_blank())
ggplot(data = italy, aes(date, amount, fill = type)) +
geom_bar(position="stack", stat = "identity") +
theme(legend.title=element_blank()) +
labs(title = "Cases and Deaths in Italy Through Time",
x = "Date",
y = "Amount")
italy %>%
#filter(type=="cases") %>%
ggplot(aes(x=date, y=double_derivative, group = type, color = type)) +
labs(title = "Rate of Rate of Increase of Deaths and Cases in Italy",
caption = "Error is hidden, but raw data was fairly volatile and the standard deviation is large.  Pattern remains meaninful and more rigorous analysis is necessary",
x = "Date",
y = "Daily Increase of Reports Compared to Previous Day") +
#geom_line() +
geom_smooth(se=F, na.rm = T) +
theme(legend.title=element_blank()) +
xlim(as.Date("2.15.20",format="%m.%d.%y"),NA)
us %>%
filter(type=="cases") %>%
ggplot(aes(x=date, y=double_derivative, group = 1)) +
labs(title = "US", caption = "caption" ) +
#geom_line() +
geom_smooth() +
theme_minimal() +
xlim(as.Date("2.15.20",format="%m.%d.%y"),NA)
combined.countries %>%
filter(type=="cases") %>%
ggplot(aes(x=date, y=double_derivative, group = Country.Region, color = Country.Region)) +
labs(title = "Rate of Rate of Increase of Confirmed Cases by Country",
caption = "Standard deviation is significant  Pattern remains meaninful but more rigorous analysis is necessary",
x = "Date",
y = "Daily Increase of Reports Compared to Previous Day") +
#geom_line() +
geom_smooth(se=F) +
theme_minimal()
#xlim(as.Date("1.23.20",format="%m.%d.%y"),NA)
combined.countries %>%
filter(type=="deaths") %>%
ggplot(aes(x=date, y=double_derivative, group = Country.Region, color = Country.Region)) +
labs(title = "Rate of Rate of Increase of Deaths by Country",
caption = "Standard deviation is significant.  Pattern remains meaninful but more rigorous analysis is necessary",
x = "Date",
y = "Daily Increase of Reports Compared to Previous Day") +
#geom_line() +
geom_smooth(se=F) +
theme_minimal()
#xlim(as.Date("1.23.20",format="%m.%d.%y"),NA)
# Let's look at death rates as percentages of cases.  Here I compare a country with one of the highest case fatality rates (Italy), with a country with one of the lowest (Germany).  It should be noted that this is an unfair comparison at the current date of writing as Italy has been dealing with the virus for a few weeks longer than Germany.
require(gridExtra)
plot1 <- ggplot(data = italy, aes(date, amount, fill = type)) +
geom_bar(position="fill", stat = "identity") +
labs(title = "Percentages of Case Deaths Italy", y="Percent", x="Date") +
theme(legend.title=element_blank())
plot2 <- ggplot(data = germany, aes(date, amount, fill = type)) +
geom_bar(position="fill", stat = "identity") +
labs(title = "Percentages of Case Deaths Germany", y="Percent", x="Date") +
theme(legend.title=element_blank())
grid.arrange(plot1, plot2, ncol=2)
combined.countries %>%
filter(type=="cases") %>%   # Have filtered by cases
filter(amount>400) %>%    # Filter cases > 400
group_by(Country.Region) %>%
mutate(date = as.integer(format(date, "%j"))) %>%
mutate(date = date - date[length(date)]) %>% # Change date to days since cases > 400
ggplot(aes(date, amount, color = Country.Region)) +
# geom_line() +
# geom_vline(xintercept = 1, color = "red", size=.25) + # Wuhan locks down
# geom_vline(xintercept = 11, color = "green", size=.25) + # Italy locks down
# geom_vline(xintercept = -1, color = "blue", size=.25) + # South Korea Socially Isolates
# geom_vline(xintercept = 8, color = "purple", size=.25) + # NY State orders lockdown
labs(x="Days since number of cases reached 400",
y="Cumulative Cases",
title = "Comparison of Cumulative Cases by Country",
subtitle = "Beginning When Number of Infections is Above 400",
caption = "China represents only Hubei data") +
geom_smooth(size=.75, na.rm = T) +
ylim(0,NA) +
theme(legend.title=element_blank())
#Majority of people of South Korea decide to socially isolate 2.20.20
#Italy Lockdown 3.8.20
#Wuhan Lockdown 1.23.20
#NY State orders lockdown
# How to determine Slope?  Doubling every ___ days?
combined.countries %>%
filter(type=="cases") %>%
filter(amount>400) %>%    # Filter cases > 400
group_by(Country.Region) %>%
mutate(date = as.integer(format(date, "%j"))) %>%
mutate(date = date - date[length(date)]) %>% # Change date to days since first death
ggplot(aes(date, amount, color = Country.Region)) +
geom_line() +
labs(x="Days since number of cases reached 400",
y="Cumulative Cases",
title = "Exponential Projections of Cumulative Cases by Country",
subtitle = "Beginning When Number of Infections is Above 400",
caption = "China represents only Hubei data") +
#xlim(NA,as.Date(50, origin="2019-12-31")) +
ylim(0,NA) +
#geom_smooth(size=.75) +
theme(legend.title=element_blank()) +
scale_y_log10() +
geom_abline(slope=.1, intercept=3)
#stat_smooth(method="lm",fullrange=TRUE)
# Row combine all datasets
combined.countries %>%
filter(type=="deaths") %>%   # Have filtered by deaths
filter(amount>0) %>%    # Filter cases > 0
group_by(Country.Region) %>%
mutate(date = as.integer(format(date, "%j"))) %>%
mutate(date = date - date[length(date)]) %>% # Change date to days since first death
ggplot(aes(date, amount, color = Country.Region)) +
#geom_line() +
labs(x="Days since first Death",
y="Cumulative Deaths",
title = "Comparison of Cumulative Deaths by Country Beginning After First Death",
caption = "China represents only Hubei data") +
ylim(0,NA) +
geom_smooth(size=.75, na.rm = T) +
theme(legend.title=element_blank())
combined.countries %>%
filter(type=="deaths") %>%   # Have filtered by deaths
filter(amount>0) %>%    # Filter cases > 0
group_by(Country.Region) %>%
mutate(date = as.integer(format(date, "%j"))) %>%
mutate(date = date - date[length(date)]) %>% # Change date to days since first death
ggplot(aes(date, amount, color = Country.Region)) +
#geom_line() +
labs(x="Days since first Death",
y="Cumulative Deaths",
title = "Exponential Projections of Cumulative Deaths by Country Beginning After First Death",
caption = "China represents only Hubei data") +
ylim(0,NA) +
#geom_smooth() +
theme(legend.title=element_blank()) +
stat_smooth(method="lm",fullrange=TRUE)
# add summed weekly column to prep for graph below
combined.countries.cumulative <- combined.countries %>%
filter(type=="cases") %>%
group_by(Country.Region) %>%
arrange( Country.Region, -as.integer(date))
# adds weekly column which is a weekly sum of the slope column "Number of New Daily Cases in the Past Week"
num.days = length(names(confirmed_cases))-4
for(i in 1:(length(combined.countries.cumulative$slope))){
if(num.days-(i%%num.days) < 7){
combined.countries.cumulative$weekly[i] = sum(combined.countries.cumulative$slope[i:(i+num.days-(i%%num.days))])
}
else if(i%%num.days == 0){
combined.countries.cumulative$weekly[i] =combined.countries.cumulative$slope[i]
}
else{
combined.countries.cumulative$weekly[i] = sum(combined.countries.cumulative$slope[i:(i+6)])
}
}
combined.countries.cumulative %>%
filter(amount>400) %>%    # Filter cases > 400
group_by(Country.Region) %>%
mutate(date = as.integer(format(date, "%j"))) %>%
mutate(date = date - date[length(date)]) %>% # Change date to days since cases > 400
ggplot(aes(amount, weekly, color = Country.Region)) +
geom_line() +
labs(x="Cumulative Cases",
y="Number of New Daily Cases in the Past Week",
title = "Which countries have exponential case growth?",
subtitle = "Beginning When Number of Infections is Above 400",
caption = "China represents only Hubei data") +
#geom_smooth(size=.5, se=F) +
scale_y_log10() +
scale_x_log10() +
theme(legend.title=element_blank())
library(maps)
library(openintro)
#world_map <- map_data("world")  #to map countries in the world
states_map <- map_data("state") #to map states in the US
states_data <- states_data %>%
mutate(state = tolower(abbr2state(state))) %>%
rename(region = state)
states_geo <- left_join(states_map, states_data, by = "region")
states_geo %>%
ggplot(aes(long, lat, fill=positive)) +
labs(title = "Confirmed Cases of COVID-19", x = "Longitude", y = "Latitude") +
geom_polygon(aes(group=group), col = "black") +
coord_fixed(ratio = 1.15)  +
scale_fill_gradientn(colors = c('blue','yellow', 'red')) + #customize colors  colors = brewer.pal(13, "Spectral")
guides(fill=guide_legend(title="Confirmed Cases"))
states_geo %>%
ggplot(aes(long, lat, fill=death)) +
labs(title = "Deaths from COVID-19", x = "Longitude", y = "Latitude") +
geom_polygon(aes(group=group), col = "black") +
coord_fixed(ratio = 1.15)  +
scale_fill_gradientn(colors = c('blue','yellow', 'red')) + #customize colors  colors = brewer.pal(13, "Spectral")
guides(fill=guide_legend(title="Deaths"))
library(tidycensus)
library(RColorBrewer)
nyc_counties <- c("Kings County, New York","New York County, New York", "Queens County, New York", "Richmond County, New York", "Bronx County, New York")
nyc_geo <- get_acs(geography = "county",
state = "New York", # if we only want NY counties
table = "B03001",
year = 2018,
survey = "acs5",
geometry = TRUE)
boroughs <- read.csv("https://raw.githubusercontent.com/nychealth/coronavirus-data/master/boro.csv")
boroughs <- boroughs %>%
filter(BOROUGH_GROUP != "Citywide") %>%
arrange(BOROUGH_GROUP)
boroughs$NAME <- nyc_counties
nyc_geo <- nyc_geo %>%
filter(NAME %in% nyc_counties)
nyc_geo <- left_join(nyc_geo, boroughs, by = "NAME")
nyc_geo %>%
ggplot(aes(fill=COVID_CASE_RATE)) +
geom_sf() +
geom_sf_text(aes(label = BOROUGH_GROUP), fontface="bold") +
labs(title = "Rate of COVID-19 Cases by Borough", subtitle = "Rate = Cases per 100,000 residents", x = "Latitude", y = "Longitude") +
scale_fill_gradientn(colors = brewer.pal(9, "YlOrRd")) + #customize colors  colors = brewer.pal(13, "Spectral")
guides(fill=guide_legend(title="Rate"))
nyc_geo %>%
ggplot(aes(fill=COVID_CASE_COUNT)) +
geom_sf() +
geom_sf_text(aes(label = BOROUGH_GROUP), fontface="bold") +
labs(title = "COVID-19 Cases by Borough", x = "Latitude", y = "Longitude") +
scale_fill_gradientn(colors = brewer.pal(9, "YlOrRd")) + #customize colors  colors = brewer.pal(13, "Spectral")
guides(fill=guide_legend(title="Count"))
View(boroughs)
View(states_data)
library(tidyverse)
library(ggplot2)
theme_set(theme_minimal())
library(gapminder)
library(ggplot2)
theme_set(theme_minimal())
data(gapminder)
head(gapminder)
library(ggplot2)
theme_set(theme_minimal())
data(gapminder)
head(gapminder)
library(ggplot2)
theme_set(theme_minimal())
data(gapminder, package = "gapminder")
library(ggplot2)
theme_set(theme_minimal())
library(gapminder)
install.packages("gapminder")
library(ggplot2)
theme_set(theme_minimal())
library(gapminder)
head(gapminder)
gapminder %>%
filter(year == 1967) %>%
ggplot(aes(x = gdpPercap,
y=lifeExp,
size = pop)) +
geom_point(show.legend = F, aes(color=continent)) +
scale_color_viridis_d() +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy")
library(gganimate)
install.packages("gganimate")
library(gganimate)
p<-gapminder %>%
#  filter(year == 1967) %>% now we want all years included
ggplot(aes(x = gdpPercap,
y=lifeExp,
size = pop)) +
geom_point(show.legend = F, aes(color=continent)) +
scale_color_viridis_d() +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy") +
# here we add animation stuff
transition_time(year) +
labs(title = "Year {frame_time}")
animate(p, fps=1)
install.packages("gifski")
install.packages("av")
install.packages("png")
animate(p, fps=1)
